apply plugin: 'com.android.application'


android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    def main_version_code = 142020
    def develop_version_code = 142020

    def version_code_release = main_version_code
    def version_name_release = getVersionName(version_code_release)

    def version_code_beta = main_version_code
    def version_name_beta = getVersionName(version_code_beta)

    def version_code_develop = develop_version_code
    def version_name_develop = getVersionName(version_code_develop)

    defaultConfig {
//         Enabling multidex support.
         multiDexEnabled true
        minSdkVersion 19
        targetSdkVersion 25
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
        }
    }

    dexOptions {
        incremental true
        javaMaxHeapSize "2048M"
        jumboMode = true
    }

    productFlavors {
        flavors_Debug {
            applicationId "cn.situne.itee"
            minSdkVersion 17
            targetSdkVersion 19
            versionCode version_code_beta
            versionName "Beta 1." + version_name_beta
//        versionName "v1." + version_name_release
        }
        flavors_Release {
            applicationId "cn.situne.itee"
            versionCode version_code_release
            versionName "v1." + version_name_release
            minSdkVersion 17
            targetSdkVersion 19
        }
        flavors_Beta {
            applicationId "cn.situne.itee"
            versionCode version_code_beta
            versionName "Beta 1." + version_name_beta
            minSdkVersion 17
            targetSdkVersion 19
        }
        flavors_Develop {
            applicationId "cn.situne.itee"
            versionCode version_code_develop
            versionName "Develop 1." + version_name_develop
            minSdkVersion 17
            targetSdkVersion 19
        }
    }
    useLibrary 'org.apache.http.legacy'

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/ASL2.0'
    }


    buildTypes {

        debug {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    Integer idx = 0
                    if (variant.buildType.name.equals("release") &&
                            variant.productFlavors.getAt(idx).name.equals("flavors_Release")) {
                        //noinspection GroovyAssignabilityCheck
                        output.outputFile = new File(outputFile.parent, "iTee_release_1." + version_name_release + ".apk");
                    } else if (variant.buildType.name.equals("release") &&
                            variant.productFlavors.getAt(idx).name.equals("flavors_Beta")) {
                        //noinspection GroovyAssignabilityCheck
                        output.outputFile = new File(outputFile.parent, "iTee_beta_1." + version_name_beta + ".apk");
                    } else if (variant.buildType.name.equals("release") &&
                            variant.productFlavors.getAt(idx).name.equals("flavors_Develop")) {
                        //noinspection GroovyAssignabilityCheck
                        output.outputFile = new File(outputFile.parent, "iTee_develop_1." + version_name_develop + ".apk");
                    }
                }
            }
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    sourceSets {
        main.java.srcDirs += 'src/main/java'
    }
}

repositories {
    maven { url "https://jitpack.io" }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:multidex:1.0.0'
    //noinspection GradleDependency
    compile 'com.mcxiaoke.volley:library:1.0.16'
    compile 'commons-codec:commons-codec:1.10'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    compile 'org.apache.httpcomponents:httpclient-android:4.3.5.1'
    compile('org.apache.httpcomponents:httpmime:4.3') {
        exclude module: "httpclient"
    }
    compile 'com.jakewharton:butterknife:8.4.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'
    compile project(':SlidingMenu')
    compile project(':CalendarLib')
    compile project(':viewPagerIndicatorLib')
    compile project(':pullToRefreshLib')
    compile project(':actionSheet4Android')
    compile files('libs/zxing.jar')
    compile project(':zxing')
    compile files('libs/umeng-update-v2.6.0.1.jar')
    compile 'com.umeng.analytics:analytics:latest.integration'
    compile files('libs/guavalib.jar')
    compile 'org.apache.commons:commons-lang3:3.4'
    compile project(':xCLCharts')
    compile files('libs/LklMidServiceAidl_V1.0.4.5021.0_20160722.jar')
    compile 'com.android.support:appcompat-v7:25.1.1'
    compile 'com.android.support:support-v4:25.1.1'

}

def String getVersionName(versionCode) {
    return String.valueOf(versionCode).substring(0, 3) + "." + String.valueOf(versionCode).substring(3);
}